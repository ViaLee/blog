(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{393:function(t,a,s){"use strict";s.r(a);var r=s(54),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h3",{attrs:{id:"mihoyo"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mihoyo"}},[t._v("#")]),t._v(" miHoYo")]),t._v(" "),s("h4",{attrs:{id:"http-缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http-缓存"}},[t._v("#")]),t._v(" "),s("RouterLink",{attrs:{to:"/pages/http.html#HTTP缓存"}},[t._v("HTTP 缓存")])],1),t._v(" "),s("h4",{attrs:{id:"协商缓存为什么需要根据-etag-和-last-modified两个字段判断"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存为什么需要根据-etag-和-last-modified两个字段判断"}},[t._v("#")]),t._v(" "),s("RouterLink",{attrs:{to:"/pages/http.html#为什么要有etag"}},[t._v("协商缓存为什么需要根据 etag 和 Last-Modified"),s("strong",[t._v("两个")]),t._v("字段判断?")])],1),t._v(" "),s("h4",{attrs:{id:"bfc-盒子模型-画一个三角形"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bfc-盒子模型-画一个三角形"}},[t._v("#")]),t._v(" Bfc，盒子模型，画一个三角形")]),t._v(" "),s("h4",{attrs:{id:"怎样写一个旋转刷新的动画-css3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#怎样写一个旋转刷新的动画-css3"}},[t._v("#")]),t._v(" 怎样写一个旋转刷新的动画 CSS3")]),t._v(" "),s("h4",{attrs:{id:"重绘-回流-怎样优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重绘-回流-怎样优化"}},[t._v("#")]),t._v(" 重绘，回流，怎样优化")]),t._v(" "),s("h4",{attrs:{id:"js-基本数据类型-怎样检测-typeof-instanceof-区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#js-基本数据类型-怎样检测-typeof-instanceof-区别"}},[t._v("#")]),t._v(" JS 基本数据类型，怎样检测，typeof,instanceof 区别")]),t._v(" "),s("h4",{attrs:{id:"script-标签设置-defer-和-async-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#script-标签设置-defer-和-async-的区别"}},[t._v("#")]),t._v(" script 标签设置 defer 和 async 的区别")]),t._v(" "),s("h4",{attrs:{id:"闭包的应用场景-它的缺陷-hooks-是怎样解决缺陷的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#闭包的应用场景-它的缺陷-hooks-是怎样解决缺陷的"}},[t._v("#")]),t._v(" 闭包的应用场景，它的缺陷， hooks 是怎样解决缺陷的")]),t._v(" "),s("h4",{attrs:{id:"垃圾回收机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收机制"}},[t._v("#")]),t._v(" 垃圾回收机制")]),t._v(" "),s("h4",{attrs:{id:"事件委托在-react-vue-里是怎样的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事件委托在-react-vue-里是怎样的"}},[t._v("#")]),t._v(" 事件委托在 React，Vue 里是怎样的")]),t._v(" "),s("h4",{attrs:{id:"事件循环机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事件循环机制"}},[t._v("#")]),t._v(" 事件循环机制")]),t._v(" "),s("h4",{attrs:{id:"自定义-hooks-的特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自定义-hooks-的特点"}},[t._v("#")]),t._v(" 自定义 hooks 的特点")]),t._v(" "),s("h4",{attrs:{id:"怎样实现一个自定义-hook-检测一个-dom-元素内容是否溢出-返回布尔类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#怎样实现一个自定义-hook-检测一个-dom-元素内容是否溢出-返回布尔类型"}},[t._v("#")]),t._v(" 怎样实现一个自定义 hook：检测一个 dom 元素内容是否溢出，返回布尔类型")]),t._v(" "),s("h4",{attrs:{id:"usecallback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#usecallback"}},[t._v("#")]),t._v(" useCallback")]),t._v(" "),s("h4",{attrs:{id:"context-是怎样实现的-子组件怎样修改公共-state"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#context-是怎样实现的-子组件怎样修改公共-state"}},[t._v("#")]),t._v(" Context 是怎样实现的，子组件怎样修改公共 state")]),t._v(" "),s("h4",{attrs:{id:"react-里的虚拟-dom"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#react-里的虚拟-dom"}},[t._v("#")]),t._v(" React 里的虚拟 dom")]),t._v(" "),s("h4",{attrs:{id:"两棵树是怎样比较的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#两棵树是怎样比较的"}},[t._v("#")]),t._v(" 两棵树是怎样比较的")]),t._v(" "),s("h4",{attrs:{id:"fiber-是什么-它是怎样实现分片处理的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fiber-是什么-它是怎样实现分片处理的"}},[t._v("#")]),t._v(" Fiber 是什么，它是怎样实现分片处理的")]),t._v(" "),s("h4",{attrs:{id:"前端性能优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前端性能优化"}},[t._v("#")]),t._v(" 前端性能优化")]),t._v(" "),s("h4",{attrs:{id:"webpack-里-tree-shaking-怎样开启"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#webpack-里-tree-shaking-怎样开启"}},[t._v("#")]),t._v(" Webpack 里 tree shaking 怎样开启")])])}),[],!1,null,null,null);a.default=e.exports}}]);