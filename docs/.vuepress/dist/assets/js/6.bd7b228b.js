(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{386:function(r,t,e){r.exports=e.p+"assets/img/browser.f04b3c3b.jpg"},387:function(r,t,e){r.exports=e.p+"assets/img/chrome.b3d7a249.jpg"},397:function(r,t,e){"use strict";e.r(t);var s=e(54),a=Object(s.a)({},(function(){var r=this,t=r.$createElement,s=r._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[s("h2",{attrs:{id:"浏览器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浏览器"}},[r._v("#")]),r._v(" 浏览器")]),r._v(" "),s("h3",{attrs:{id:"浏览器里的进程线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浏览器里的进程线程"}},[r._v("#")]),r._v(" 浏览器里的进程线程")]),r._v(" "),s("blockquote",[s("p",[r._v("原文："),s("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/47407398",target:"_blank",rel:"noopener noreferrer"}},[r._v("图解浏览器的基本工作原理"),s("OutboundLink")],1)])]),r._v(" "),s("p",[r._v("一个浏览器，它可以是单进程多线程的应用，也可以是使用 IPC 通信的多进程应用。\n"),s("img",{attrs:{src:e(386),alt:"Browser",title:"不同浏览器的架构"}}),r._v("\nChrome 采用多进程架构，其顶层存在一个 Browser process 用以协调浏览器的其它进程。\n"),s("img",{attrs:{src:e(387),alt:"Chrome",title:"Chrome的进程"}}),r._v("\nChrome 把浏览器不同程序的功能看做服务，这些服务可以方便的分割为不同的进程或者合并为一个进程。以 Broswer Process为例，如果 Chrome 运行在强大的硬件上，它会分割不同的服务到不同的进程，这样 Chrome 整体的运行会更加稳定，但是如果 Chrome 运行在资源贫瘠的设备上，这些服务又会合并到同一个进程中运行，这样可以节省内存。"),s("br"),r._v(" "),s("a",{attrs:{href:"https://developers.google.com/web/updates/2018/07/site-isolation",target:"_blank",rel:"noopener noreferrer"}},[r._v("Site Isolation"),s("OutboundLink")],1),r._v(" 机制从 Chrome 67 开始默认启用。这种机制允许在同一个 Tab 下的跨站 iframe 使用单独的进程来渲染，这样会更为安全。")]),r._v(" "),s("h3",{attrs:{id:"从-url-到页面"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#从-url-到页面"}},[r._v("#")]),r._v(" 从 URL 到页面")]),r._v(" "),s("h4",{attrs:{id:"导航流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#导航流程"}},[r._v("#")]),r._v(" 导航流程")]),r._v(" "),s("p",[r._v("浏览器 Tab 外的工作主要由 Browser Process 掌控，Browser Process 又对这些工作进一步划分，使用不同线程进行处理：")]),r._v(" "),s("ul",[s("li",[r._v("UI thread ： 控制浏览器上的按钮及输入框；")]),r._v(" "),s("li",[r._v("network thread: 处理网络请求，从网上获取数据；")]),r._v(" "),s("li",[r._v("storage thread: 控制文件等的访问；")])]),r._v(" "),s("p",[s("strong",[r._v("导航流程：")])]),r._v(" "),s("ol",[s("li",[r._v("UI thread解析地址栏输入的信息，判断是否为合法 URL\n"),s("ul",[s("li",[r._v("否：使用默认搜索引擎合成带有输入信息的url进行搜索")]),r._v(" "),s("li",[r._v("是：url则判断是否完整，弱不完整则通过内置的方案来对其进行补全")])])]),r._v(" "),s("li",[r._v("通知network thread\n"),s("ul",[s("li",[r._v("检查本地缓存资源，如果有直接返给浏览器进程")]),r._v(" "),s("li",[r._v("没有找到资源或者需要验证资源是否有效，则会进入网络请求流程。\n如果 url 是 ip 地址，则直接进入 TCP 连接阶段\n如果是域名则需要 DNS 解析，得到 ip 地址，再建立 TCP 连接。\n进入 TCP 队列，单域名限制 6 个，超过需要排队等待。浏览器和服务器通过三次握手建立连接。\n如果是 Https，则建立 TCP 连接之后建立 TLS 连接，安全地交换对称密钥。\n连接建立后，构建请求行，请求头等信息，发送请求，接收响应。网络进程解析响应头，状态码，301、302 则重新请求。\n200 则解析响应体，contentTpe，若为字节流类型则提交给下载管理器处理，Html 类型则准备进入渲染阶段。\n如果当前打开的页面和该请求是同一个站点，则复用该渲染进程，否则新创建一个渲染进程。浏览器进程将网络进程接收的 HTML 数据提交给渲染进程。")])])])])])}),[],!1,null,null,null);t.default=a.exports}}]);