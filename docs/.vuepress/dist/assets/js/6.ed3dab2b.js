(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{386:function(t,e,r){t.exports=r.p+"assets/img/browser.f04b3c3b.jpg"},387:function(t,e,r){t.exports=r.p+"assets/img/chrome.b3d7a249.jpg"},397:function(t,e,r){"use strict";r.r(e);var s=r(54),a=Object(s.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"浏览器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浏览器"}},[t._v("#")]),t._v(" 浏览器")]),t._v(" "),s("h2",{attrs:{id:"浏览器里的进程线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浏览器里的进程线程"}},[t._v("#")]),t._v(" 浏览器里的进程线程")]),t._v(" "),s("p",[t._v("一个浏览器，它可以是单进程多线程的应用，也可以是使用 IPC 通信的多进程应用。\n"),s("img",{attrs:{src:r(386),alt:"Browser",title:"不同浏览器的架构"}}),t._v("\nChrome 采用多进程架构，其顶层存在一个 Browser process 用以协调浏览器的其它进程。\n"),s("img",{attrs:{src:r(387),alt:"Chrome",title:"Chrome的进程"}}),t._v("\nChrome 把浏览器不同程序的功能看做服务，这些服务可以方便的分割为不同的进程或者合并为一个进程。以 Broswer Process 为例，如果 Chrome 运行在强大的硬件上，它会分割不同的服务到不同的进程，这样 Chrome 整体的运行会更加稳定，但是如果 Chrome 运行在资源贫瘠的设备上，这些服务又会合并到同一个进程中运行，这样可以节省内存。"),s("br"),t._v(" "),s("a",{attrs:{href:"https://developers.google.com/web/updates/2018/07/site-isolation",target:"_blank",rel:"noopener noreferrer"}},[t._v("Site Isolation"),s("OutboundLink")],1),t._v(" 机制从 Chrome 67 开始默认启用。这种机制允许在同一个 Tab 下的跨站 iframe 使用单独的进程来渲染，这样会更为安全。")]),t._v(" "),s("h2",{attrs:{id:"从-url-到页面"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#从-url-到页面"}},[t._v("#")]),t._v(" 从 URL 到页面")]),t._v(" "),s("h3",{attrs:{id:"导航"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#导航"}},[t._v("#")]),t._v(" 导航")]),t._v(" "),s("p",[t._v("浏览器 Tab 外的工作主要由 Browser Process 掌控，属于"),s("strong",[t._v("导航流程")]),t._v("，Browser Process 对这些工作进一步划分，使用不同线程进行处理：")]),t._v(" "),s("ul",[s("li",[t._v("UI thread ： 控制浏览器上的按钮及输入框；")]),t._v(" "),s("li",[t._v("network thread: 处理网络请求，从网上获取数据；")]),t._v(" "),s("li",[t._v("storage thread: 控制文件等的访问；")])]),t._v(" "),s("p",[s("strong",[t._v("导航流程：")])]),t._v(" "),s("ol",[s("li",[t._v("UI thread 解析地址栏输入的信息，判断是否为合法 URL\n"),s("ul",[s("li",[t._v("否：使用默认搜索引擎合成带有输入信息的 url 进行搜索")]),t._v(" "),s("li",[t._v("是：url 则判断是否完整，弱不完整则通过内置的方案来对其进行补全")])])]),t._v(" "),s("li",[t._v("通知 network thread\n"),s("ul",[s("li",[t._v("检查本地缓存资源，如果有直接返给浏览器进程。")]),t._v(" "),s("li",[t._v("没有找到本地缓存资源或者需要验证资源是否有效，则会进入网络请求流程。")]),t._v(" "),s("li",[t._v("如果 url 是 ip 地址，则直接进入 TCP 连接阶段。")]),t._v(" "),s("li",[t._v("如果 url 是域名则需要 DNS 解析，得到 ip 地址，再建立 TCP 连接。")]),t._v(" "),s("li",[t._v("进入 TCP 队列，单域名限制最多 6 个，超过需要排队等待。浏览器和服务器通过三次握手建立连接。")]),t._v(" "),s("li",[t._v("如果是 Https，则建立 TCP 连接之后建立 TLS 连接，安全地交换对称密钥。")]),t._v(" "),s("li",[t._v("连接建立后，构建请求行，请求头等信息，发送请求，接收响应。")]),t._v(" "),s("li",[t._v("解析响应头，状态码，301、302 则通知 UI thread 服务器要求重定向，之后，另外一个 URL 请求会被触发。")]),t._v(" "),s("li",[t._v("状态码 200 则解析响应体，contentTpe，若为字节流类型则提交给下载管理器处理，Html 类型则准备进入渲染阶段。Safe Browsing 检查也会在此时触发，如果域名或者请求内容匹配到已知的恶意站点，network thread 会展示一个警告页。此外 CORB 检测也会触发确保敏感数据不会被传递给渲染进程。")])])]),t._v(" "),s("li",[t._v("network thread 确信浏览器可以导航到请求网页，network thread 会通知 UI thread 数据已经准备好，UI thread 会查找到一个 renderer process 进行网页的渲染。如果当前打开的页面和该请求是同一个站点，则复用该渲染进程，否则新创建一个渲染进程。")]),t._v(" "),s("li",[t._v("Browser Process 将 network thread 接收的 HTML 数据提交给 renderer process。进入渲染流程。")]),t._v(" "),s("li",[t._v("渲染结束，renderer process 通知 Browser Process，UI thread 停止 tab 中的 spinner")])]),t._v(" "),s("h3",{attrs:{id:"渲染"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#渲染"}},[t._v("#")]),t._v(" 渲染")]),t._v(" "),s("p",[t._v("由 JS 引擎和渲染引擎处理")]),t._v(" "),s("h4",{attrs:{id:"渲染进程-renderer-process"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#渲染进程-renderer-process"}},[t._v("#")]),t._v(" 渲染进程 renderer process")]),t._v(" "),s("ol",[s("li",[t._v("主线程 Main thread")]),t._v(" "),s("li",[t._v("工作线程 Worker thread")]),t._v(" "),s("li",[t._v("合成器线程 Compositor thread")]),t._v(" "),s("li",[t._v("光栅线程 Raster thread")])]),t._v(" "),s("h4",{attrs:{id:"渲染流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#渲染流程"}},[t._v("#")]),t._v(" 渲染流程")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("解析 html"),s("br"),t._v("\nhtml 源码通过 xml parser 解析成 dom")])]),t._v(" "),s("li",[s("p",[t._v("加载资源"),s("br"),t._v("\n主线程会请求构建 dom 过程中引用的资源或从 cache 读取，如果在 html 中存在 "),s("code",[t._v("<img>")]),t._v(" "),s("code",[t._v("<link>")]),t._v(" 等标签，preload scanner 会把这些请求传递给 Browser process 中的 network thread 进行相关资源的下载。")])]),t._v(" "),s("li",[s("p",[t._v("加载执行 js(js 引擎)"),s("br"),t._v("\n因为 "),s("code",[t._v("document.write()")]),t._v("等 API 会影响 Dom 结构，所以遇到"),s("code",[t._v("<script>")]),t._v("，会停止解析 HTML，而去加载解析和执行 JS 代码，因此为其添加"),s("code",[t._v("async")]),t._v("或"),s("code",[t._v("defer")]),t._v("等属性异步加载，不会阻塞渲染。")])]),t._v(" "),s("li",[s("p",[t._v("解析样式"),s("br"),t._v("\ncss 源码通过 css parser 解析，获取每个节点的样式，构建出 style 树，包含节点内容和样式。")])]),t._v(" "),s("li",[s("p",[t._v("布局"),s("br"),t._v("\n遍历 dom，及节点样式，主线程基于 style 树构建出 layout 树(仅包含可见 dom)，包含位置信息。")])]),t._v(" "),s("li",[s("p",[t._v("绘制"),s("br"),t._v("\n主线程遍历 layout 树，创建绘制记录(包含绘制顺序)。")])]),t._v(" "),s("li",[s("p",[t._v("合成帧"),s("br"),t._v("\n主线程遍历 layout 树来创建 layer tree（层树，包含层级），主线程会把这些信息通知给 compositor thread。compositor thread 对"),s("code",[t._v("层")]),t._v("进行栅格化，有的层的可以达到整个页面的大小，compositor thread 会将它切块(磁贴)后发送给 Raster thread，栅格化每一个块并存储在 GPU 显存中。compositor thread 会收集称为绘制四边形的磁贴信息以创建合成帧。当页面合成时，compositor thread 会标记页面中绑定有事件处理器的区域为 non-fast scrollable region。")]),t._v(" "),s("p",[s("strong",[t._v("Tips:")])]),t._v(" "),s("ul",[s("li",[t._v("由于浏览器的 UI 改变或者其它拓展的渲染进程也可以添加合成帧。")]),t._v(" "),s("li",[t._v("合成器无关主线程，不涉及重绘重排，因此"),s("a",{attrs:{href:"https://www.html5rocks.com/en/tutorials/speed/high-performance-animations/",target:"_blank",rel:"noopener noreferrer"}},[t._v("合成器相关动画"),s("OutboundLink")],1),t._v("最流畅。")]),t._v(" "),s("li",[t._v("滚动发生或非快速滚动区域（non-fast scrollable region）外的事件触发，重复该步骤。该区域内的事件触发会提交给主线程同步处理。")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("document"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("body"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"touchstart"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("event")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("event"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("target "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" area"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      event"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("preventDefault")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" passive"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// passive: true 使监听相关事件时，又不阻塞合成器线程在等待主线程响应前构建新的组合帧。 且不调用preventDefault")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener#%E4%BD%BF%E7%94%A8_passive_%E6%94%B9%E5%96%84%E7%9A%84%E6%BB%9A%E5%B1%8F%E6%80%A7%E8%83%BD")]),t._v("\n")])])])]),t._v(" "),s("li",[s("p",[t._v("合成帧通过 IPC 传递给 Browser Process，Browser Process 再传递给 GPU 用以展示在屏幕上。")]),t._v(" "),s("blockquote",[s("p",[t._v("参考："),s("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/47407398",target:"_blank",rel:"noopener noreferrer"}},[t._v("图解浏览器的基本工作原理"),s("OutboundLink")],1)])])])]),t._v(" "),s("h2",{attrs:{id:"事件循环"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事件循环"}},[t._v("#")]),t._v(" 事件循环")]),t._v(" "),s("p",[t._v("由上可知浏览器内核：渲染引擎和 JS 引擎，js 和渲染是分开的。"),s("br"),t._v("\nJS 引擎处理 JavaScript 语言的一大特点就是单线程，同一个时间只能做一件事。为了协调事件、用户交互、脚本、UI 渲染和网络处理等行为，防止主线程的阻塞，才有 Event Loop。")]),t._v(" "),s("ol",[s("li",[t._v("先同步执行 js，遇到宏任务立即执行，遇到微任务，将其推入微任务队列，执行完宏任务后执行微任务")]),t._v(" "),s("li",[t._v("然后检查是否需要渲染")]),t._v(" "),s("li",[t._v("需要渲染则执行 requestAnimationFrame(重绘之前执行)后切换到渲染引擎渲染")]),t._v(" "),s("li",[t._v("渲染后/不需要渲染则检查 worker")]),t._v(" "),s("li",[t._v("然后在一帧中的剩余时间内执行 requestIdleCallback")])]),t._v(" "),s("p",[t._v("宏任务："),s("br"),t._v("\nscript,setTimeout,setInterval,setImmediate,I/O，postMessage"),s("br"),t._v("\n微任务："),s("br"),t._v("\nmutationObserve：比如 vue 的 nextTick 的实现之前使用到了（仅浏览器）"),s("br"),t._v("\npromise 的 resolve，async,await"),s("br"),t._v("\nprocess.nextTick ：每个类型队列结束后执行")]),t._v(" "),s("blockquote",[s("p",[t._v("参考："),s("br"),t._v(" "),s("a",{attrs:{href:"https://juejin.cn/post/6961349015346610184",target:"_blank",rel:"noopener noreferrer"}},[t._v("Event Loop 和 JS 引擎、渲染引擎的关系"),s("OutboundLink")],1),s("br"),t._v(" "),s("a",{attrs:{href:"https://www.bilibili.com/video/BV1864y117PQ?p=3",target:"_blank",rel:"noopener noreferrer"}},[t._v("node 中的事件循环"),s("OutboundLink")],1)])]),t._v(" "),s("h2",{attrs:{id:"浏览器一帧内发生了什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浏览器一帧内发生了什么"}},[t._v("#")]),t._v(" 浏览器一帧内发生了什么")]),t._v(" "),s("ul",[s("li",[t._v("处理用户输入事件；")]),t._v(" "),s("li",[t._v("执行 JS；")]),t._v(" "),s("li",[t._v("check 渲染")]),t._v(" "),s("li",[t._v("requestAnimation 调用")]),t._v(" "),s("li",[t._v("渲染")]),t._v(" "),s("li",[t._v("check worker")]),t._v(" "),s("li",[t._v("requestIdleCallback 回调"),s("br"),t._v("\n浏览器空闲时间：16ms 内处理完以上的剩余时间就是空闲时间"),s("br"),t._v("\n浏览器很忙的情况：\nrequestIdleCallback 的 timeout 参数，如果超过这个时间，还没被执行，那么会在下一帧强制执行回调（兼容性较差）")])])])}),[],!1,null,null,null);e.default=a.exports}}]);