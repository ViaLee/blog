(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{388:function(t,e,s){t.exports=s.p+"assets/img/lifeCycle.cac7e5e5.png"},389:function(t,e,s){t.exports=s.p+"assets/img/renderControl.09225c1d.png"},404:function(t,e,s){"use strict";s.r(e);var a=s(54),r=Object(a.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"react"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react"}},[t._v("#")]),t._v(" React")]),t._v(" "),a("h2",{attrs:{id:"jsx"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jsx"}},[t._v("#")]),t._v(" Jsx")]),t._v(" "),a("p",[t._v("react 中，经过 babel 编译--\x3eReact.createElement"),a("br"),t._v("\nReact DOM 在渲染所有输入内容之前，默认会进行转义，这样可以有效地防止 XSS（cross-site-scripting, 跨站脚本）攻击。")]),t._v(" "),a("h2",{attrs:{id:"生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#生命周期"}},[t._v("#")]),t._v(" 生命周期")]),t._v(" "),a("p",[a("img",{attrs:{src:s(388),alt:"LifeCycle"}}),t._v("\n错误处理："),a("br"),t._v("\nstatic getDerivedStateFromError(error)  render阶段，不可有副作用"),a("br"),t._v("\ncomponentDidCatch()  commit阶段，可有副作用"),a("br"),t._v("\ncomponentDidUpdate 与useEffect无依赖类似，每一次执行函数组件都会执行")]),t._v(" "),a("h4",{attrs:{id:"getsnapshotbeforeupdate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#getsnapshotbeforeupdate"}},[t._v("#")]),t._v(" getSnapshotBeforeUpdate")]),t._v(" "),a("p",[t._v("获取更新前 DOM 信息的最佳时期，可进行和dom相关的计算\nreturn一个快照作为componentDidUpdate的第三个参数")]),t._v(" "),a("h4",{attrs:{id:"useeffect和uselayouteffect和componentdidmount"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#useeffect和uselayouteffect和componentdidmount"}},[t._v("#")]),t._v(" useEffect和useLayoutEffect和componentDidMount")]),t._v(" "),a("p",[t._v("useEffect在commit阶段的layout子阶段结束后异步调用（渲染后调用）"),a("br"),t._v("\ncomponentDidMount和useLayoutEffect：commit的layout阶段同步调用（渲染前调用）")]),t._v(" "),a("h2",{attrs:{id:"fiber"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fiber"}},[t._v("#")]),t._v(" Fiber")]),t._v(" "),a("p",[t._v("ReactElement —— reconciler ——> fiber"),a("br"),t._v("\n14中fiber类型，关系有三种：child，return，sibling")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" FunctionComponent "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 函数组件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ClassComponent "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 类组件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" IndeterminateComponent "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 初始化的时候不知道是函数组件还是类组件 ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" HostRoot "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Root Fiber 可以理解为根元素 ， 通过reactDom.render()产生的根元素")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" HostPortal "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("              "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对应  ReactDOM.createPortal 产生的 Portal ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" HostComponent "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("           "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// dom 元素 比如 <div>")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" HostText "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 文本节点")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Fragment "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对应 <React.Fragment> ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Mode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对应 <React.StrictMode>   ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ContextConsumer "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对应 <Context.Consumer>")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ContextProvider "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对应 <Context.Provider>")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ForwardRef "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("             "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对应 React.ForwardRef")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Profiler "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("               "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对应 <Profiler/ >")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" SuspenseComponent "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对应 <Suspense>")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" MemoComponent "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("14")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对应 React.memo 返回的组件")]),t._v("\n")])])]),a("h2",{attrs:{id:"children相关api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#children相关api"}},[t._v("#")]),t._v(" Children相关API")]),t._v(" "),a("p",[t._v("React.isValidElement(item) 判断是否 react element\nReact.Children.only  子节点是否单一\nReact.Children.forEach 遍历子节点\nReact.Children.forEach = React.Children.toArray + Array.prototype.forEach")]),t._v(" "),a("blockquote",[a("p",[t._v("通常与React.cloneElement()一起使用操作children,注入新的属性")])]),t._v(" "),a("h2",{attrs:{id:"渲染控制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#渲染控制"}},[t._v("#")]),t._v(" 渲染控制")]),t._v(" "),a("p",[a("img",{attrs:{src:s(389),alt:"RenderControl"}}),t._v("\n控制 render 的方法：")]),t._v(" "),a("ul",[a("li",[t._v("从父组件直接隔断子组件的渲染，经典的就是 memo，缓存 element 对象。")]),t._v(" "),a("li",[t._v("组件从自身来控制是否 render ，比如：PureComponent ，shouldComponentUpdate。")])]),t._v(" "),a("h3",{attrs:{id:"缓存-element-对象减少更新原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存-element-对象减少更新原理"}},[t._v("#")]),t._v(" 缓存 element 对象减少更新原理")]),t._v(" "),a("p",[t._v("每次 render 阶段，createElement 会创建一个新的 props(pendingProps)，react 对比 fiber 上的 pendingProps 和 oldProps，如果相等，则不更新。将 element 对象缓存起来，上面 props 也就和 fiber 上 oldProps 指向相同的内存空间，也就是相等。")]),t._v(" "),a("h3",{attrs:{id:"purecomponent"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#purecomponent"}},[t._v("#")]),t._v(" PureComponent")]),t._v(" "),a("p",[t._v("浅比较 state 和 props 是否相等；\nshouldComponentUpdate 的权重，大于 PureComponent；\n更新阶段对 state 和 props 的比较，用了 "),a("em",[t._v("shallowEqual")]),t._v(" 函数：")]),t._v(" "),a("ol",[a("li",[t._v("判断新老 state/props 是否相等")]),t._v(" "),a("li",[t._v("新老 state/props 是否为非对象/null")]),t._v(" "),a("li",[t._v("新老 state/props 的 keys 长度是否相等")]),t._v(" "),a("li",[t._v("遍历老 state/props，对比对应新 state/props 的值是否相等")])]),t._v(" "),a("h3",{attrs:{id:"react-memo"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react-memo"}},[t._v("#")]),t._v(" React.memo")]),t._v(" "),a("p",[t._v("是一个高阶组件")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("React"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("memo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Component"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" compare"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// compare 返回true：缓存，false：更新")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// shouldComponentUpdate 返回true：更新，false：缓存")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// compare 不传->使用shallowEqual函数浅比较props")]),t._v("\n")])])]),a("h3",{attrs:{id:"强制重新渲染"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#强制重新渲染"}},[t._v("#")]),t._v(" 强制重新渲染")]),t._v(" "),a("ol",[a("li",[t._v("forceUpdate："),a("br"),t._v("\n如果组件调用 forceUpdate,则全局的 hasForceUpdate=true，组件更新前检查如果为 true，则跳过 PureComponent 的浅比较和 shouldComponentUpdate 自定义比较，直接更新")]),t._v(" "),a("li",[t._v("context 的更新")])]),t._v(" "),a("h3",{attrs:{id:"suspense"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#suspense"}},[t._v("#")]),t._v(" Suspense")]),t._v(" "),a("p",[t._v("Suspense 在执行内部可以通过 try{}catch{} 方式捕获异常，这个异常通常是一个 Promise ，可以在这个 Promise 中进行数据请求工作，Suspense 内部会处理这个 Promise ，Promise 结束后，Suspense 会再一次重新 render 把数据渲染出来，达到异步渲染的效果。")]),t._v(" "),a("h2",{attrs:{id:"hooks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hooks"}},[t._v("#")]),t._v(" Hooks")]),t._v(" "),a("h3",{attrs:{id:"usecallback-和-usememo-区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usecallback-和-usememo-区别"}},[t._v("#")]),t._v(" useCallback 和 useMemo 区别")]),t._v(" "),a("p",[t._v("useCallback 缓存第一个参数；"),a("br"),t._v("\nuseMemo 执行第一个参数，缓存其结果。")])])}),[],!1,null,null,null);e.default=r.exports}}]);