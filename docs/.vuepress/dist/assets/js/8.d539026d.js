(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{399:function(t,s,a){"use strict";a.r(s);var e=a(54),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"布局"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#布局"}},[t._v("#")]),t._v(" 布局")]),t._v(" "),a("h3",{attrs:{id:"flex-布局"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#flex-布局"}},[t._v("#")]),t._v(" flex 布局")]),t._v(" "),a("p",[t._v("父元素属性：justify-content，align-items，align-content"),a("br"),t._v("\n子元素属性：flex，align-self")]),t._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* flex-grow: 主轴方向有剩余空间时增长比例，可用来实现左右固定宽，中间自适应布局 */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* flex-shrink: 主轴方向宽度不够时坍缩比例 */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* flex-basis: 主轴方向上 初始大小 */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 两个值: flex-grow | flex-basis */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("flex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 1 30px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 两个值: flex-grow | flex-shrink */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("flex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 2 2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 三个值: flex-grow | flex-shrink | flex-basis */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("flex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 2 2 10%"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* align-self: 次轴方向对齐方式（单行情况） */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* align-content: 换行情况下，次轴对齐方式，和align-self类似，对单行（flex-wrap: nowrap）无效*/")]),t._v("\n")])])]),a("h3",{attrs:{id:"grid-和-flex-各自的应用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#grid-和-flex-各自的应用场景"}},[t._v("#")]),t._v(" grid 和 flex 各自的应用场景")]),t._v(" "),a("h4",{attrs:{id:"是一维布局-还是-二维布局"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#是一维布局-还是-二维布局"}},[t._v("#")]),t._v(" 是一维布局 还是 二维布局")]),t._v(" "),a("p",[t._v("一般来说，一维布局用 flex，二维布局用 grid")]),t._v(" "),a("h4",{attrs:{id:"是从内容出发还是从布局出发"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#是从内容出发还是从布局出发"}},[t._v("#")]),t._v(" 是从内容出发还是从布局出发？")]),t._v(" "),a("ul",[a("li",[t._v("从内容出发用 flex：先有一组内容(数量一般不固定),然后希望他们均匀的分布在容器中，由内容自己的大小决定占据的空间")]),t._v(" "),a("li",[t._v("从布局出发用 grid：先规划网格(数量一般比较固定)，然后再把元素往里填充")])]),t._v(" "),a("h3",{attrs:{id:"rem-和-em-区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rem-和-em-区别"}},[t._v("#")]),t._v(" rem 和 em 区别")]),t._v(" "),a("p",[t._v("1em: 是父元素或本身 font-size，向上找\nrem: 根元素 font-size")])])}),[],!1,null,null,null);s.default=n.exports}}]);